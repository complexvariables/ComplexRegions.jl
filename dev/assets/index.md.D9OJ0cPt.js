import{_ as t,c as a,o,aA as n}from"./chunks/framework.CnfbKpVw.js";const u=JSON.parse('{"title":"ComplexRegions","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),i={name:"index.md"};function s(r,e,c,l,p,d){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="ComplexRegions" tabindex="-1">ComplexRegions <a class="header-anchor" href="#ComplexRegions" aria-label="Permalink to &quot;ComplexRegions {#ComplexRegions}&quot;">​</a></h1><p>This package provides types and methods that are useful for working with curves and regions in the (extended) complex plane.</p><p>Most functionality is provided through Julia types. Per Julia conventions, these are all capitalized. You use these capitalized names to create values of the type; e.g., <a href="/ComplexRegions.jl/dev/curves#Segment">Segment</a> and <a href="/ComplexRegions.jl/dev/curves#Circle">Circle</a>.</p><p>Other methods may create values of these types, but since they are not distinct types themselves, they are not capitalized. For example, the <a href="/ComplexRegions.jl/dev/api#ComplexRegions.rectangle-Tuple{AbstractVector, AbstractVector}"><code>rectangle</code></a> method creates a <a href="/ComplexRegions.jl/dev/polygons#Polygon">Polygon</a>.</p><p>The methods in this package should work not only with the built-in <code>Complex</code> type, but also with the <code>Polar</code> and <code>Spherical</code> types from the <a href="https://complexvariables.github.io/ComplexValues.jl/stable/" target="_blank" rel="noreferrer">ComplexValues</a> package, which it re-exports.</p><h2 id="Abstract-vs-concrete-types" tabindex="-1">Abstract vs concrete types <a class="header-anchor" href="#Abstract-vs-concrete-types" aria-label="Permalink to &quot;Abstract vs concrete types {#Abstract-vs-concrete-types}&quot;">​</a></h2><p>All abstract types have names starting with <code>Abstract</code>. You probably won&#39;t encounter them unless you want to extend the provided functionality.</p><p>Abstract types cannot be instantiated. They serve as supertypes that collect common-denominator functionality, much like an interface or abstract class does in some object-oriented languages. Only the concrete descendants of these abstract types can be instantiated.</p><p>For example, any <code>AbstractCurve</code> is supposed to implement functions for finding points, tangents, and normals along the curve. There is a generic concrete <code>Curve</code> type that does the minimum required. Specific subtypes such as a <a href="/ComplexRegions.jl/dev/curves#Ray">Ray</a> or <a href="/ComplexRegions.jl/dev/curves#Arc">Arc</a> provide additional specialized functionalities appropriate to the subtypes.</p><h2 id="Curve,-Path,-and-Region" tabindex="-1">Curve, Path, and Region <a class="header-anchor" href="#Curve,-Path,-and-Region" aria-label="Permalink to &quot;Curve, Path, and Region {#Curve,-Path,-and-Region}&quot;">​</a></h2><p>A <strong>curve</strong> is meant to be a smooth, non-self-intersecting curve in the extended complex plane. The generic <a href="/ComplexRegions.jl/dev/curves#Curve">Curve</a> type requires you to specify an explicit parameterization that is not checked for smoothness or even continuity. It will use automatic differentiation to find a tangent, if no tangent function is supplied. Particular subtypes of curve are <code>Circle</code>, <code>Arc</code>, <code>Line</code>, <code>Ray</code>, and <code>Segment</code>.</p><p>A <strong>path</strong> is a piecewise-continuous complex-valued path. In practice a <a href="/ComplexRegions.jl/dev/paths#Path"><code>Path</code></a> can be specified as a vector of curves. The path is checked for continuity at creation time. The most important provided specific path types are <a href="/ComplexRegions.jl/dev/polygons#Polygon"><code>Polygon</code></a> and <a href="/ComplexRegions.jl/dev/polygons#CircularPolygon"><code>CircularPolygon</code></a>.</p><p>Both curves and paths have <strong>closed</strong> variants. These are additionally checked at creation to ensure that the initial and final points are the same.</p><p>One atypical aspect of curves and paths, even &quot;closed&quot; ones, is that they lie in the extended or compactified complex plane and thus may be unbounded. For instance, a line in the plane may be interpreted as a circle on the Riemann sphere, and is thus a closed curve passing through infinity.</p><p>Finally, a <strong>region</strong> is an open region in the extended plane bounded by a closed curve or path.</p><h2 id="Tolerance" tabindex="-1">Tolerance <a class="header-anchor" href="#Tolerance" aria-label="Permalink to &quot;Tolerance {#Tolerance}&quot;">​</a></h2><p>Boundaries and endpoints are not well-posed ideas in floating-point, since an arbitrarily small perturbation to a value can move a point on or off of them. Thus, many concepts in the package such as intersection or continuity are checked only up to a small tolerance. This value defaults to a modest multiple of machine precision and can be overridden on a per-call basis.</p>',17)]))}const m=t(i,[["render",s]]);export{u as __pageData,m as default};
